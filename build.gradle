plugins {
    id 'net.researchgate.release' version '2.0.2'
    //    id "org.sonarqube" version '2.5'
    id 'nu.studer.credentials' version '1.0.0'
    id 'io.codearte.nexus-staging' version '0.11.0'
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'



println "***************************************************************"
println "SISTEMA: " + name
println "VERSION: " + version
println "***************************************************************"

//Para guardar el usuario y contraseña en forma segura hacer:
//gradle addCredentials -PcredentialsKey=nexusUser -PcredentialsValue=XXXXX
//gradle addCredentials -PcredentialsKey=nexusPassword -PcredentialsValue=YYYYY
//o para hacerlo más seguro:
//gradle addCredentials -PcredentialsKey=nexusUser -PcredentialsValue=XXXXX -PcredentialsPassphrase=zzzzzzzz
//gradle addCredentials -PcredentialsKey=nexusPassword -PcredentialsValue=YYYYY -PcredentialsPassphrase=zzzzzzzz
//def nexusUser = credentials.nexusUser
//def nexusPassword = credentials.nexusPassword
def sonatypeUser = credentials.sonatypeUser
def sonatypePassword = credentials.sonatypePassword




// seteo carpeta de fuentes para sonar
//sonarqube {
//    properties {
//        property "sonar.sources", "src/main"
//    }
//}

// desactivo la generación de javadoc en los proyectos que tengan la tarea
javadoc.enabled = true

repositories {
    maven {
        url "$sonatypeURLRelease"
            
        credentials {
            username = "$sonatypeUser"
            password = "$sonatypePassword"
        }
    }
    mavenLocal()
    //        mavenCentral()
}
    
dependencies {
    //compile("net.bytebuddy:byte-buddy:1.3.18")
    //compile("net.bytebuddy:byte-buddy-agent:1.3.18")
    compile("cglib:cglib:3.2.2")
    
    //compile("com.esotericsoftware:kryo-shaded:4.0.1")
    
    compile("com.orientechnologies:orientdb-graphdb:2.2.22")
    
    //compile("com.arshadow:UtilityLib:1.0")
    testCompile("junit:junit:[4,)")
    
}

test {
    testLogging {
        // Make sure output from
        // standard out or error is shown
        // in Gradle output.
        showStandardStreams = true
 
        // Or we use events method:
        // events 'standard_out', 'standard_error'
 
        // Or set property events:
        // events = ['standard_out', 'standard_error']
 
        // Instead of string values we can
        // use enum values:
        // events org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_OUT,
        //        org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_ERROR,
    }
}

// de acuerdo a la guía de 
// http://central.sonatype.org/pages/gradle.html
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives")}
    
    ext."signing.keyId"= credentials.gpgKeyId
    ext."signing.password"= credentials.gpgKeyPassword
    ext."signing.secretKeyRingFile" = credentials.gpgKeyRingFile                

    sign configurations.archives
}





nexusStaging {
    packageGroup = "com.github.mdre" //optional if packageGroup == project.getGroup()
    //    stagingProfileId = "yourStagingProfileId" //when not defined will be got from server using "packageGroup"
}

//sube a nexus
uploadArchives {
    repositories {
    
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment) 
            }
            
            repository(url: "$sonatypeURLRelease") {
                authentication(userName: credentials.sonatypeUser, password: credentials.sonatypePassword)
            }
            
            snapshotRepository(url: "$sonatypeURLSnapshot") {
                authentication(userName: credentials.sonatypeUser, password: credentials.sonatypePassword)
            }
            
            pom.groupId = 'com.github.mdre'
            pom.artifactId = 'odbogm'
            
            
            pom.project {
                name 'Object to OrientDB Graph mapper'
                packaging 'jar'
                // optionally artifactId can be defined here 
                description 'ODBOGM let you store/retrieve object in a OrientDB graph structure in a clear and simple way.'
                url 'https://github.com/mdre/odbogm'

                scm {
                    connection 'scm:git:git://github.com/mdre/odbogm.git'
                    developerConnection 'scm:git:ssh://github.com/mdre/odbogm.git'
                    url 'https://github.com/mdre/odbogm'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'mdre'
                        name 'Marcelo D. RE'
                        email 'marcelo.re@gmail.com'
                    }
                }
            }
            
        }
    }
}

createReleaseTag.dependsOn ':uploadArchives'
